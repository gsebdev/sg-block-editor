{"version":3,"sources":["../src/index.ts","../src/BlockEditor.tsx","../src/context.tsx","../src/helpers.ts","../src/blocks/ImageBlock.tsx","../src/components/Button.tsx","../src/Block.tsx","../src/components/SpacingTool.tsx","../src/default-blocks.tsx","../src/blocks/TextBlock.tsx","../src/blocks/GroupBlock.tsx","../src/blocks/HtmlBlock.tsx","../src/definitions.tsx"],"sourcesContent":["import BlockEditor from \"./BlockEditor\";\r\nimport { useEditor }from \"./context\";\r\nimport * as Definitions from './definitions';\r\nimport RowBlock from \"./blocks/GroupBlock\";\r\nimport ImageBlock from \"./blocks/ImageBlock\";\r\nimport TextBlock from \"./blocks/TextBlock\";\r\nimport defaultBlocks from \"./default-blocks\";\r\nimport './sg-block-editor-default-theme.scss';\r\n\r\nexport {\r\n    BlockEditor,\r\n    useEditor,\r\n    Definitions,\r\n    RowBlock,\r\n    ImageBlock,\r\n    TextBlock,\r\n    defaultBlocks\r\n}","import { forwardRef, useCallback, useEffect, useRef } from \"react\";\r\nimport { BlocksEditorContextProvider, useEditor } from \"./context\";\r\nimport { BlocksEditorProps, EditorRefObject } from \"./definitions\";\r\nimport defaultBlocks from \"./default-blocks\";\r\nimport { FaPlus } from \"react-icons/fa6\";\r\nimport Block, { AddBlockContextMenu } from \"./Block\";\r\nimport clsx from \"clsx\";\r\n\r\nconst BlockEditorContent: React.FC = () => {\r\n\r\n    const { blocks, setActiveBlock } = useEditor();\r\n    const editorRef = useRef<HTMLDivElement>(null);\r\n\r\n    const handleClickOutside = useCallback((e: MouseEvent) => {\r\n        if (editorRef.current && !editorRef.current.contains(e.target as Node)) {\r\n                setActiveBlock(null);\r\n        }\r\n    }, [setActiveBlock]);\r\n\r\n    useEffect(() => {\r\n        document.body.addEventListener('click', handleClickOutside);\r\n        return () => {\r\n            document.body.removeEventListener('click', handleClickOutside);\r\n        };\r\n    }, [handleClickOutside]);\r\n\r\n\r\n    return (\r\n        <div ref={editorRef} className={clsx(\r\n            \"sg-block__editor__content\",\r\n            blocks.size === 0 ? \"sg-block__editor__content--empty\" : \"\"\r\n        )}>\r\n            <div>\r\n                {!!blocks &&\r\n                    Array.from(blocks.values()).filter(block => !block.parentID).map(block => (\r\n                        <Block key={block.blockID} block={block} />\r\n                    ))\r\n                }\r\n                {blocks.size === 0 &&\r\n                    <AddBlockContextMenu>\r\n                        <button className=\"sg-block__btn\"><FaPlus style={{ marginRight: 4 }} />Ajouter du contenu</button>\r\n                    </AddBlockContextMenu>\r\n                }\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default forwardRef<EditorRefObject, BlocksEditorProps>(function BlocksEditor({ data, onChange, extraBlocks }, ref) {\r\n    const blocks = {\r\n        ...defaultBlocks,\r\n        ...extraBlocks\r\n    };\r\n\r\n    return (\r\n        <BlocksEditorContextProvider data={data} onChange={onChange} ref={ref} availableBlocks={blocks}>\r\n            <BlockEditorContent />\r\n        </BlocksEditorContextProvider>\r\n    )\r\n});","import { createContext, Dispatch, forwardRef, useCallback, useContext, useEffect, useImperativeHandle, useRef, useState } from \"react\";\r\nimport { BlockType, EditorBlock, EditorParsedBlock, EditorProviderProps, EditorRefObject } from \"./definitions\";\r\nimport { SetStateAction } from \"react\";\r\nimport { genBlockID } from \"./helpers\";\r\n\r\nconst initialContext: {\r\n    blocks: Map<string, EditorParsedBlock>,\r\n    setBlocks: Dispatch<SetStateAction<Map<string, EditorParsedBlock>>>,\r\n    addBlock: (type: BlockType['type'], args?: { parentID?: string, position?: 'after' | 'before', reference?: string }) => void,\r\n    updateBlock: (blockID: string, value: Partial<EditorParsedBlock>, shouldNotDirty?: boolean) => void,\r\n    deleteBlock: (blockID: string) => void,\r\n    isDirty: boolean,\r\n    setIsDirty: Dispatch<SetStateAction<boolean>>\r\n    activeBlock: string | null,\r\n    setActiveBlock: Dispatch<SetStateAction<string | null>>,\r\n    availableBlocks: { [key: string]: EditorBlock },\r\n} = {\r\n    isDirty: false,\r\n    setIsDirty: () => { },\r\n    blocks: new Map(),\r\n    setBlocks: () => { },\r\n    addBlock: () => { },\r\n    updateBlock: () => { },\r\n    deleteBlock: () => { },\r\n    activeBlock: null,\r\n    setActiveBlock: () => { },\r\n    availableBlocks: {},\r\n};\r\n\r\nconst blockEditorContext = createContext(initialContext);\r\n\r\nexport const BlocksEditorContextProvider = forwardRef<EditorRefObject, EditorProviderProps>(({ children, data, onChange, availableBlocks }, ref) => {\r\n\r\n    const [blocks, setBlocks] = useState<Map<string, EditorParsedBlock>>(new Map());\r\n    const [isDirty, setIsDirty] = useState<boolean>(false);\r\n    const [activeBlock, setActiveBlock] = useState<string | null>(null);\r\n    const renderedRef = useRef({\r\n        JSONValue: data ?? [],\r\n        HTMLValue: '',\r\n        getJSONValue() { return this.JSONValue; },\r\n        getHTMLValue() { return this.HTMLValue; }\r\n    })\r\n\r\n    useImperativeHandle(ref, () => renderedRef.current);\r\n\r\n    useEffect(() => {\r\n        if (isDirty) {\r\n            const renderBlocksToJSONRecursive = (b: EditorParsedBlock): BlockType => {\r\n                if (b.children && Array.isArray(b.children)) {\r\n                    return {\r\n                        type: b.type,\r\n                        value: b.value,\r\n                        children: b.children.map(child => {\r\n                            const childBlock = blocks.get(child);\r\n                            if (childBlock) {\r\n                                return renderBlocksToJSONRecursive(childBlock);\r\n                            }\r\n                            return {\r\n                                type: 'text',\r\n                                value: {\r\n                                    htmlContent: '<p>[ERROR] Block not found</p>'\r\n                                }\r\n                            };\r\n                        })\r\n                    }\r\n                }\r\n                return {\r\n                    type: b.type,\r\n                    value: b.value,\r\n                };\r\n            }\r\n            \r\n            const updateValuesAsync = async () => {\r\n                const blocksValue = Array.from(blocks.values())\r\n                \r\n                //Render the HTML if render function is provided\r\n                let newRenderedHTML = '';\r\n                //recursive html render\r\n                const renderToHTML = async (b:EditorParsedBlock) => {\r\n                    const { type, value, children } = b;\r\n                    const { render } = availableBlocks[type] ?? {};\r\n                    if(render) {\r\n                        let renderedChildren;\r\n                        if(children) {\r\n                            renderedChildren = [];\r\n                            for(const child of children) {\r\n                                const childBlock = blocks.get(child);\r\n                                if (childBlock) {\r\n                                    renderedChildren.push(await renderToHTML(childBlock));\r\n                                }\r\n                            }\r\n                        }\r\n                        const newValue = {\r\n                            ...value ?? {},\r\n                            children: renderedChildren\r\n                        }\r\n                        const html = await render(newValue);\r\n                        return html;\r\n                    } else {\r\n                        return '<p>No render function provided</p>';\r\n                    }\r\n                }\r\n\r\n                const filteredBlocks = blocksValue.filter(block => !block.parentID);\r\n\r\n                // Render the HTML\r\n                for (const b of filteredBlocks) {\r\n                    newRenderedHTML += await renderToHTML(b);\r\n                }\r\n\r\n                // Render the JSON\r\n                const newRenderedJSON = filteredBlocks.map(editorBlock => renderBlocksToJSONRecursive(editorBlock));\r\n                return {\r\n                    HTMLValue: newRenderedHTML,\r\n                    JSONValue: newRenderedJSON\r\n                }\r\n            }\r\n\r\n            // set the updated values and trigger change callback\r\n            updateValuesAsync().then(({ HTMLValue, JSONValue }) => {\r\n                renderedRef.current.JSONValue = JSONValue;\r\n                renderedRef.current.HTMLValue = HTMLValue;\r\n                onChange?.(JSONValue);\r\n                setIsDirty(false);\r\n            });\r\n\r\n        }\r\n    }, [blocks, isDirty, onChange]);\r\n\r\n    useEffect(() => {\r\n        renderedRef.current.JSONValue = data ?? [];\r\n        // parse blocks and set initital state\r\n        if (data) {\r\n            const initialBlocks = new Map<string, EditorParsedBlock>();\r\n\r\n            const parseBlocks = (b: BlockType, parentID?: string) => {\r\n                const blockID = genBlockID();\r\n\r\n                if (b.children && Array.isArray(b.children)) {\r\n                    const parsed: EditorParsedBlock = { ...b, blockID, parentID, children: [] };\r\n                    parsed.children = b.children.map(child => parseBlocks(child, blockID));\r\n                    initialBlocks.set(blockID, parsed);\r\n                } else {\r\n                    initialBlocks.set(blockID, {\r\n                        ...b,\r\n                        blockID,\r\n                        parentID,\r\n                        children: undefined\r\n                    });\r\n                }\r\n                return blockID;\r\n            }\r\n\r\n            data.forEach(b => parseBlocks(b));\r\n\r\n            setBlocks(initialBlocks);\r\n        }\r\n    }, [data]);\r\n\r\n    const updateBlock = useCallback((blockID: string, updatedData: Partial<EditorParsedBlock>, shouldNotDirty?: boolean) => {\r\n        setBlocks(prevBlocks => {\r\n            const newBlocks = new Map<string, EditorParsedBlock>(prevBlocks);\r\n            const blockToUpdate = newBlocks.get(blockID);\r\n\r\n            if (!blockToUpdate) return prevBlocks;\r\n\r\n\r\n            const newBlock = {\r\n                ...blockToUpdate,\r\n                ...updatedData,\r\n                value: {\r\n                    ...blockToUpdate.value ?? {},\r\n                    ...updatedData.value ?? {}\r\n                }\r\n            }\r\n\r\n            newBlocks.set(blockID, newBlock);\r\n\r\n            return newBlocks;\r\n        });\r\n        if (!shouldNotDirty) setIsDirty(true);\r\n    }, [setBlocks]);\r\n\r\n    useEffect(() => {\r\n        const blocksThatShouldHaveFocusWithin: string[] = [];\r\n\r\n        if (activeBlock) {\r\n            \r\n            // find all blocks that should have focus within\r\n            const activeBlockParent = blocks.get(activeBlock)?.parentID;\r\n            let nParentBlock: EditorParsedBlock | undefined = activeBlockParent ? blocks.get(activeBlockParent) : undefined;\r\n            while (nParentBlock) {\r\n                blocksThatShouldHaveFocusWithin.push(nParentBlock.blockID);\r\n                nParentBlock = nParentBlock.parentID ? blocks.get(nParentBlock.parentID) : undefined;\r\n            }\r\n        }\r\n\r\n        // update necessary blocks to have focus within\r\n        blocks.forEach((block) => {\r\n            if (blocksThatShouldHaveFocusWithin.includes(block.blockID)) {\r\n                if (!block.hasFocusWithin) updateBlock(block.blockID, { hasFocusWithin: true }, true)\r\n            } else {\r\n                if (block.hasFocusWithin) updateBlock(block.blockID, { hasFocusWithin: false }, true)\r\n            }\r\n        });\r\n    }, [blocks, activeBlock, updateBlock]);\r\n\r\n    const addBlock = useCallback((type: BlockType['type'], args?: { parentID?: string, position?: 'after' | 'before', reference?: string }) => {\r\n        const blockID = genBlockID();\r\n        const { parentID, position, reference } = args ?? {};\r\n\r\n        setBlocks(prevBlocks => {\r\n            const newBlocksArray = Array.from(prevBlocks);\r\n\r\n            let insertIndex = newBlocksArray.length;\r\n            if (reference) {\r\n                insertIndex = newBlocksArray.findIndex(([id]) => id === reference);\r\n                if (position === 'after') insertIndex += 1;\r\n            }\r\n\r\n            newBlocksArray.splice(insertIndex, 0, [\r\n                blockID, {\r\n                    type,\r\n                    value: type in availableBlocks ? availableBlocks[type]?.defaultValue : undefined,\r\n                    blockID,\r\n                    parentID,\r\n                    children: availableBlocks[type]?.acceptChildren ? [] : undefined\r\n                }]);\r\n\r\n            // When parentID is provided, we insert the new block as a child of that parent\r\n            if (parentID) {\r\n                const parentBlock = newBlocksArray.find(([id]) => id === parentID)?.[1];\r\n                if (parentBlock && Array.isArray(parentBlock.children)) {\r\n\r\n                    if (!parentBlock.children.includes(blockID)) {\r\n                        let childrenInsertIndex = parentBlock.children.length;\r\n                        if (reference) {\r\n                            childrenInsertIndex = parentBlock.children.findIndex(id => id === reference);\r\n                            if (position === 'after') childrenInsertIndex += 1;\r\n                        }\r\n                        parentBlock.children.splice(childrenInsertIndex, 0, blockID);\r\n                    }\r\n                }\r\n            }\r\n            return new Map(newBlocksArray);\r\n        });\r\n        setActiveBlock(blockID);\r\n        setIsDirty(true);\r\n    }, []);\r\n\r\n    const deleteBlock = useCallback((blockID: string) => {\r\n        let newSelectedBlock: string | null = null;\r\n\r\n        setBlocks(prevBlock => {\r\n            const newBlocks = new Map(prevBlock);\r\n            const blockToDelete = newBlocks.get(blockID);\r\n\r\n            if (!blockToDelete) return newBlocks;\r\n\r\n            if (blockToDelete?.parentID) newSelectedBlock = blockToDelete.parentID;\r\n\r\n            const IDsToDelete: string[] = []\r\n\r\n            const getChildrenIDsRecursive = (bID: string) => {\r\n                const b = newBlocks.get(bID);\r\n                if (b && b.children && Array.isArray(b.children)) {\r\n                    for (const childID of b.children) {\r\n                        getChildrenIDsRecursive(childID);\r\n                    }\r\n                }\r\n                IDsToDelete.push(bID);\r\n            }\r\n\r\n            const deleteInParentChildren = () => {\r\n                if (blockToDelete && blockToDelete.parentID) {\r\n                    const parentBlock = newBlocks.get(blockToDelete.parentID);\r\n                    if (parentBlock && parentBlock.children) {\r\n                        parentBlock.children = parentBlock.children.filter(childID => childID !== blockID);\r\n                    }\r\n                }\r\n            }\r\n\r\n            const deleteBlockWithchildren = () => {\r\n                getChildrenIDsRecursive(blockID);\r\n                deleteInParentChildren();\r\n                IDsToDelete.forEach(ID => newBlocks.delete(ID))\r\n            }\r\n\r\n\r\n\r\n            deleteBlockWithchildren();\r\n\r\n            return newBlocks;\r\n        });\r\n        setActiveBlock(newSelectedBlock);\r\n        setIsDirty(true);\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <blockEditorContext.Provider value={{\r\n            blocks,\r\n            setBlocks,\r\n            isDirty,\r\n            setIsDirty,\r\n            addBlock,\r\n            updateBlock,\r\n            deleteBlock,\r\n            activeBlock,\r\n            setActiveBlock,\r\n            availableBlocks\r\n        }}>\r\n            {children}\r\n        </blockEditorContext.Provider>\r\n    )\r\n});\r\n\r\nBlocksEditorContextProvider.displayName = 'BlocksEditorContextProvider';\r\n\r\nexport const useEditor = () => useContext(blockEditorContext);\r\n","export const genBlockID = () => '_' + Math.random().toString(36).substr(2, 9);","import React from \"react\";\r\nimport { ChangeEvent, ComponentType, PropsWithChildren, useEffect, useRef, useState } from \"react\";\r\nimport { useEditor } from \"../context\";\r\nimport { BlockType, EditorParsedBlock } from \"../definitions\";\r\nimport { MdAlignHorizontalLeft, MdAlignHorizontalRight, MdAlignHorizontalCenter } from \"react-icons/md\";\r\nimport Button from \"../components/Button\";\r\nimport { BlockToolbar, BlockToolbarColumn } from \"../Block\";\r\nimport { FaImage } from \"react-icons/fa6\";\r\n\r\ntype ImageType = {\r\n    id?: number | string;\r\n    src: string;\r\n}\r\n\r\ntype ImageBlockType = BlockType<{\r\n    image?: ImageType,\r\n    aspect?: number | string,\r\n    size?: {\r\n        height: string | number,\r\n        width: string | number\r\n    },\r\n    align?: 'left' | 'right' | 'center'\r\n}>\r\n\r\nexport type ImageSelectorProps = PropsWithChildren<{\r\n    value?: ImageType,\r\n    onSelect?: (image?: ImageType, preview?: string) => void,\r\n    className?: string\r\n}>;\r\n\r\ntype ImageSelectorWrapperProps = PropsWithChildren<{\r\n    ImageSelector?: ComponentType<ImageSelectorProps>,\r\n    value: ImageSelectorProps['value'],\r\n    onSelect: ImageSelectorProps['onSelect'],\r\n    className?: string\r\n}>;\r\n\r\nconst DefaultImageSelector: React.FC<PropsWithChildren<ImageSelectorProps>> = ({ children, value, onSelect, className }) => {\r\n\r\n    const [currentImage, setCurrentImage] = useState<ImageType | undefined>(value);\r\n\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n    useEffect(() => {\r\n        if (onSelect && currentImage && currentImage.src !== value?.src) onSelect(currentImage);\r\n    }, [currentImage])\r\n\r\n    const handleImageclick = () => {\r\n        if (inputRef.current) {\r\n            inputRef.current.click();\r\n        }\r\n    }\r\n\r\n    const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const file = e.target.files?.[0];\r\n        if (file) {\r\n            const reader = new FileReader(); // Create a new FileReader object\r\n\r\n            reader.onload = function (e) {\r\n                if (e.target?.result) {\r\n                    const dataUrl = e.target.result.toString();\r\n                    setCurrentImage({ src: dataUrl });\r\n                }\r\n            };\r\n\r\n            reader.readAsDataURL(file);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={className} onClick={handleImageclick}>\r\n            {children}\r\n            <input type=\"file\" hidden ref={inputRef} accept=\".jpg, .jpeg, .png\" onChange={handleFileChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ImageSelectorWrapper: React.FC<ImageSelectorWrapperProps> = ({\r\n    children,\r\n    ImageSelector,\r\n    value,\r\n    onSelect,\r\n    className\r\n}) => {\r\n    if (ImageSelector) return (\r\n        <ImageSelector\r\n            value={value}\r\n            onSelect={onSelect}\r\n            className={className}\r\n        >\r\n            {children}\r\n        </ImageSelector>\r\n    );\r\n\r\n    return (\r\n        <DefaultImageSelector\r\n            value={value}\r\n            onSelect={onSelect}\r\n            className={className}\r\n        >\r\n            {children}\r\n        </DefaultImageSelector>\r\n    )\r\n}\r\n\r\nconst ImagePreview: React.FC<{ src?: string, aspect?: number | string, align?: \"left\" | \"right\" | \"center\" }> = ({ src, aspect, align }) => {\r\n\r\n    return (\r\n        <>\r\n            {src ?\r\n                <img\r\n                    className=\"sg-block__blockImage__img\"\r\n                    src={src}\r\n                    style={{\r\n                        aspectRatio: aspect,\r\n                        textAlign: align\r\n                    }}\r\n                    alt=\"Selected Image\"\r\n                /> :\r\n                <div className=\"sg-block__blockImage__placeholder\">\r\n                    <FaImage />\r\n                </div>\r\n            }\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n/**\r\n * \r\n * Image Block\r\n * \r\n * \r\n */\r\nconst ImageBlock: React.FC<{ block: EditorParsedBlock<ImageBlockType>, isActive?: boolean, ImageSelector?: ComponentType<ImageSelectorProps> }> = ({ block, ImageSelector }) => {\r\n\r\n    const [imagePreview, setImagePreview] = useState<string | undefined>(block.value?.image?.src);\r\n\r\n    const { updateBlock } = useEditor();\r\n\r\n    const { blockID, value } = block;\r\n\r\n    const { image, aspect, height, align } = value ?? {};\r\n\r\n    const updateImageBlock = (newValue: Partial<ImageBlockType['value']>) => {\r\n        updateBlock(blockID, {\r\n            value: {\r\n                ...value,\r\n                ...newValue\r\n            }\r\n        })\r\n    };\r\n\r\n    const handleImageSelection = (newValue?: ImageType, imagePreviewSrc: string|undefined = undefined) => {\r\n        if (newValue) {\r\n            updateImageBlock({\r\n                image: {\r\n                    id: newValue.id,\r\n                    src: newValue.src\r\n                }\r\n            });\r\n            setImagePreview(imagePreviewSrc ?? newValue.src);\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (aspect && height !== 'auto') {\r\n            updateImageBlock({\r\n                aspect: undefined,\r\n            })\r\n        }\r\n    }, [height])\r\n\r\n    const aspects = ['auto', 'fill', 4 / 3, 3 / 2, 16 / 9, 1];\r\n    const aspectsLabels = ['original', 'Remplir', '4:3', '3:2', '16:9', '1:1'];\r\n\r\n    const aligns = ['left', 'center', 'right'];\r\n    const alignsIcons = [\r\n        <MdAlignHorizontalLeft key={\"alignLeft\"} />,\r\n        <MdAlignHorizontalCenter key={\"alignCenter\"} />,\r\n        <MdAlignHorizontalRight key={\"alignRight\"} />\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            <BlockToolbar>\r\n                <BlockToolbarColumn\r\n                    title={'Aspect'}\r\n                >\r\n\r\n                    {\r\n                        aspects.map((value, index) => (\r\n                            <Button\r\n                                key={value}\r\n                                variant={aspect === value || (value === 'fill' && height === '100%') ? 'selected' : undefined}\r\n                                onClick={() => updateImageBlock({\r\n                                    aspect: aspect === value || value === 'fill' ? undefined : value,\r\n                                    height: value === 'fill' ? '100%' : 'auto'\r\n                                })}\r\n                            >\r\n                                {aspectsLabels[index]}\r\n                            </Button>\r\n                        ))\r\n                    }\r\n                </BlockToolbarColumn>\r\n                <BlockToolbarColumn\r\n                    title={'Alignement'}\r\n                >\r\n                    {\r\n                        aligns.map((value: string, index) => (\r\n                            <Button\r\n                                key={value}\r\n                                variant={align === value ? 'selected' : \"\"}\r\n                                onClick={() => updateImageBlock({ align: align === value ? undefined : value as \"left\"|'right'|'center' })}\r\n                            >\r\n                                {alignsIcons[index]}\r\n                            </Button>\r\n                        ))\r\n                    }\r\n                </BlockToolbarColumn>\r\n            </BlockToolbar>\r\n            <ImageSelectorWrapper\r\n                className=\"sg-block__blockImage__selectorWrapper\"\r\n                value={image}\r\n                onSelect={handleImageSelection}\r\n                ImageSelector={ImageSelector}\r\n            >\r\n\r\n                <ImagePreview src={imagePreview} align={align} aspect={aspect} />\r\n            </ImageSelectorWrapper>\r\n        </>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default ImageBlock;","import React, { MouseEventHandler, PropsWithChildren } from \"react\"\r\n\r\ntype ButtonProps = PropsWithChildren<{\r\n    className?: string,\r\n    variant?: string,\r\n    onClick?: MouseEventHandler<HTMLButtonElement>,\r\n    title?: string,\r\n    ariaLabel?: string, \r\n}>;\r\n\r\nconst Button: React.FC<ButtonProps> = ({ children, className, variant, onClick, ariaLabel, title }) => {\r\n    return (\r\n        <button\r\n            onClick={(e) => {e.preventDefault(); onClick?.(e);}}\r\n            aria-label={ariaLabel}\r\n            title={title}\r\n            className={`sg-block__btn${variant ? ' sg-block__btn--' + variant : ''}${className ? ' ' + className : ''}`}\r\n        >\r\n            {children}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button;","import clsx from \"clsx\";\r\nimport React, { createContext, Dispatch, MouseEventHandler, PropsWithChildren, ReactNode, useCallback, useContext, useEffect, useMemo, useRef, useState } from \"react\";\r\nimport { FaPlus } from \"react-icons/fa6\";\r\nimport { RiDeleteBin5Line } from \"react-icons/ri\";\r\nimport { addBlockMenuProps, EditorParsedBlock } from \"./definitions\";\r\nimport { useEditor } from \"./context\";\r\nimport * as DropdownMenu from \"@radix-ui/react-dropdown-menu\";\r\nimport { Resizable, ResizableProps } from \"re-resizable\";\r\nimport SpacingTool from \"./components/SpacingTool\";\r\n\r\nconst alignStyles = {\r\n    alignSelf: {\r\n        left: 'flex-start',\r\n        center: 'center',\r\n        right: 'flex-end',\r\n    },\r\n    margin: {\r\n        center: '0 auto',\r\n        right: '0 0 0 auto',\r\n        left: '0 auto 0 0',\r\n    }\r\n\r\n}\r\n\r\nexport const AddBlockContextMenu: React.FC<addBlockMenuProps> = ({ className, children, args }) => {\r\n    const { addBlock, availableBlocks } = useEditor();\r\n\r\n    return (\r\n        <div className={clsx(\r\n            className\r\n        )}>\r\n            <DropdownMenu.Root>\r\n                <DropdownMenu.Trigger asChild>\r\n                    {children}\r\n                </DropdownMenu.Trigger>\r\n                <DropdownMenu.Content\r\n                    sideOffset={0}\r\n                    align=\"center\"\r\n                    className=\"sg-block__addMenu__content\"\r\n                >\r\n                    <DropdownMenu.Label\r\n                        className=\"sg-block__addMenu__label\"\r\n                    >\r\n                        Choisir un type\r\n                    </DropdownMenu.Label>\r\n                    {\r\n                        Object.values(availableBlocks).map((block) => {\r\n                            const Icon = block.icon;\r\n                            return (\r\n                                <DropdownMenu.Item\r\n                                    key={block.type}\r\n                                    onClick={() => addBlock(block.type, args)}\r\n                                    className=\"sg-block__addMenu__item\"\r\n                                >\r\n                                    {!!Icon && <Icon style={{ marginRight: '4px' }} />}\r\n                                    {block.name}\r\n                                </DropdownMenu.Item>\r\n                            )\r\n                        })\r\n                    }\r\n                </DropdownMenu.Content>\r\n            </DropdownMenu.Root>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst toolbarContext = createContext<[\r\n    ReactNode,\r\n    Dispatch<React.SetStateAction<React.ReactNode>>\r\n]>([\r\n    null,\r\n    () => {\r\n        throw new Error(\"Toolbar must be wrapped in context provider\")\r\n    }\r\n]);\r\n\r\nconst BlockToolbarProvider: React.FC<PropsWithChildren> = ({ children }) => {\r\n    const [toolbar, setToolbar] = useState<ReactNode>(null);\r\n    return (\r\n        <toolbarContext.Provider value={[toolbar, setToolbar]}>\r\n            {children}\r\n        </toolbarContext.Provider>\r\n    )\r\n}\r\n\r\nconst BlockToolbarRenderer: React.FC<{ position: 'top' | 'bottom', hasSpacingOptions?: boolean, block: EditorParsedBlock }> = ({ position, hasSpacingOptions, block }) => {\r\n    const [toolbar] = useContext(toolbarContext);\r\n\r\n    const { updateBlock } = useEditor();\r\n\r\n    const handleChangeSpacings = useCallback((spacingsValue: Record<string, string>) => {\r\n        updateBlock(blockID, {\r\n            value: {\r\n                spacings: spacingsValue\r\n            }\r\n        });\r\n    }, [updateBlock, block.blockID]);\r\n\r\n    const { value, blockID } = block;\r\n    const { spacings } = value ?? {};\r\n\r\n\r\n    return (\r\n        <div className={`sg-block__block__toolbar${position === 'top' ? ' sg-block__block__toolbar--top' : ''}`}>\r\n            {toolbar ?? null}\r\n            {hasSpacingOptions && <SpacingTool value={spacings} onChange={handleChangeSpacings} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ResizableWrapper: React.FC<PropsWithChildren<{ isResizable: boolean } & ResizableProps>> = ({ isResizable, children, ...props }) => {\r\n    return (\r\n        <Resizable\r\n            enable={props.enable || (isResizable ? undefined : false)}\r\n            className={props.className}\r\n            maxWidth={`100%`}\r\n            handleClasses={{\r\n                right: 'sg-block__block__resizeHandle sg-block__block__resizeHandle--right',\r\n                left: 'sg-block__block__resizeHandle sg-block__block__resizeHandle--left',\r\n                top: 'sg-block__block__resizeHandle sg-block__block__resizeHandle--top',\r\n                bottom: 'sg-block__block__resizeHandle sg-block__block__resizeHandle--bottom',\r\n\r\n            }}\r\n            size={{\r\n                width: props.size?.width || '100%',\r\n                height: props.size?.height || 'auto',\r\n            }}\r\n            style={props.style}\r\n            onResizeStop={props.onResizeStop}\r\n            onResize={props.onResize}\r\n            onResizeStart={props.onResizeStart}\r\n        >\r\n            {children}\r\n        </Resizable>\r\n    )\r\n}\r\n\r\nexport const BlockToolbar: React.FC<PropsWithChildren> = ({ children }) => {\r\n    const [, setToolbar] = useContext(toolbarContext);\r\n\r\n    useEffect(() => {\r\n        setToolbar(children);\r\n\r\n        return () => {\r\n            setToolbar(null);\r\n        };\r\n    }, [children]);\r\n\r\n    return null;\r\n}\r\n\r\nexport const BlockToolbarColumn: React.FC<PropsWithChildren<{ title: string }>> = ({ children, title }) => {\r\n    return (\r\n        <div>\r\n            <p className=\"sg-block__block__toolbar__column__title\"><b>{title}</b></p>\r\n            <div className=\"sg-block__block__toolbar__column\">\r\n                {children}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nconst Block: React.FC<{ block: EditorParsedBlock | undefined, className?: string, horizontalFlow?: boolean }> = ({ block, className, horizontalFlow }) => {\r\n    const [toolbarPosition, setToolbarPosition] = useState<'bottom' | 'top'>('bottom');\r\n\r\n    const { blocks, activeBlock, setActiveBlock, deleteBlock, availableBlocks, updateBlock } = useEditor();\r\n\r\n    const blockRef = useRef<HTMLDivElement | null>(null);\r\n\r\n    const { blockID, hasFocusWithin, parentID, type, value } = block ?? {};\r\n\r\n    const isActive = blockID === activeBlock;\r\n\r\n    const { isResizable, hasSpacingOptions, BlockEditorElement } = useMemo(() => {\r\n        if(!type) return {}\r\n        return {\r\n            isResizable: availableBlocks[type]?.isResizable || false,\r\n            hasSpacingOptions: !!availableBlocks[type]?.hasSpacingOptions,\r\n            BlockEditorElement: availableBlocks[type]?.editor\r\n        }\r\n    }, [availableBlocks, parentID]);\r\n\r\n    const scrollHandler = useCallback(() => {\r\n        const { top, bottom } = blockRef.current?.getBoundingClientRect() ?? {};\r\n        if (bottom !== undefined && top !== undefined) {\r\n            setToolbarPosition(window.innerHeight - bottom > top ? 'bottom' : 'top');\r\n        }\r\n    }, [blockRef, setToolbarPosition])\r\n\r\n    useEffect(() => {\r\n        if (blockRef.current) {\r\n            if (isActive) {\r\n                scrollHandler();\r\n                window.addEventListener('scroll', scrollHandler, true);\r\n                blockRef.current.focus();\r\n            } else {\r\n                window.removeEventListener('scroll', scrollHandler, true);\r\n            }\r\n        }\r\n\r\n        return () => window.removeEventListener('scroll', scrollHandler, true);\r\n\r\n    }, [isActive, blockRef]);\r\n\r\n    const handleClickCapture: MouseEventHandler<HTMLDivElement> = useCallback((e) => {\r\n        if (activeBlock !== blockID && !hasFocusWithin) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n\r\n            setActiveBlock(blockID ?? null);\r\n        }\r\n    }, [activeBlock, hasFocusWithin, blockID, setActiveBlock]);\r\n\r\n    if (!block) return null;\r\n\r\n    if (!blockID) return null;\r\n\r\n    if (!BlockEditorElement) return null;\r\n\r\n    return (\r\n        <BlockToolbarProvider>\r\n            <div\r\n                ref={blockRef}\r\n                style={{\r\n                    display: 'contents'\r\n                }}\r\n\r\n                onClickCapture={handleClickCapture}\r\n            >\r\n\r\n                <ResizableWrapper\r\n                    isResizable={!!isResizable && isActive}\r\n                    size={{\r\n                        width: isResizable && value?.width ? value?.width : '100%',\r\n                        height: isResizable && value?.height ? value?.height : 'auto',\r\n                    }}\r\n                    enable={\r\n                        isActive && typeof isResizable === 'object' ? isResizable : undefined\r\n                    }\r\n\r\n                    onResizeStop={(e, dir, ref, d) => {\r\n                        const containerWidth = ref.parentElement?.parentElement?.clientWidth;\r\n                        const newWidth = ref.offsetWidth;\r\n                        const newHeight = ref.offsetHeight;\r\n\r\n                        updateBlock(blockID, {\r\n                            value: {\r\n                                width: newWidth === containerWidth ? '100%' : d.width !== 0 ? newWidth + 'px' : value?.width,\r\n                                height: d.height !== 0 ? newHeight + 'px' : value?.height,\r\n                            }\r\n                        });\r\n                    }}\r\n\r\n                    style={{\r\n                        alignSelf: value?.align ? alignStyles.alignSelf[value.align as 'left'|'right'|'center'] : undefined,\r\n                        margin: value?.align ? alignStyles.margin[value.align as 'left'|'right'|'center']: undefined,\r\n                        paddingTop: value?.spacings?.top,\r\n                        paddingBottom: value?.spacings?.bottom,\r\n                        paddingLeft: value?.spacings?.left,\r\n                        paddingRight: value?.spacings?.right\r\n                    }}\r\n                    className={clsx(\r\n                        'sg-block__block',\r\n                        !hasFocusWithin && !activeBlock && (!parentID || blocks.get(parentID)?.hasFocusWithin) ? 'sg-block__block--hover' : '',\r\n                        isActive ? 'sg-block__block--active' : '',\r\n                        (!hasFocusWithin && !isActive && activeBlock) && 'sg-block__block--inactive',\r\n                        className\r\n                    )}\r\n\r\n\r\n                >\r\n                    {isActive &&\r\n                        <>\r\n                            <AddBlockContextMenu\r\n                                args={{ position: 'before', reference: blockID, parentID }}\r\n                                className=\"sg-block__contextMenu\"\r\n                            >\r\n                                <button\r\n                                    title=\"Ajouter un élément avant le bloc actif\"\r\n                                    aria-label=\"Ajotuer un élément avant le bloc actif\"\r\n                                    className={`sg-block__btn__addBlock sg-block__btn__addBlock--${horizontalFlow ? 'left' : 'top'}`}\r\n                                >\r\n                                    <FaPlus />\r\n                                </button>\r\n                            </AddBlockContextMenu>\r\n\r\n\r\n                        </>\r\n                    }\r\n\r\n                    <BlockEditorElement block={block} isActive={isActive} />\r\n                    {isActive && <BlockToolbarRenderer position={toolbarPosition} hasSpacingOptions={hasSpacingOptions} block={block} />}\r\n\r\n                    {isActive &&\r\n                        <>\r\n                            <button\r\n                                className=\"sg-block__btn sg-block__btn--square sg-block__btn__deleteBlock\"\r\n                                onClick={() => deleteBlock(blockID)}\r\n                                aria-label={\"Supprimer le block actif: \" + type}\r\n                                title={\"Supprimer le block actif: \" + type}\r\n                            >\r\n                                <RiDeleteBin5Line />\r\n                            </button>\r\n                            <AddBlockContextMenu\r\n                                args={{ position: 'after', reference: blockID, parentID }}\r\n                                className=\"sg-block__contextMenu\"\r\n                            >\r\n                                <button\r\n                                    title=\"Ajouter un élément après le bloc actif\"\r\n                                    aria-label=\"Ajouter un élément après le bloc actif\"\r\n                                    className={`sg-block__btn__addBlock sg-block__btn__addBlock--${horizontalFlow ? 'right' : 'bottom'}`}\r\n                                >\r\n                                    <FaPlus />\r\n                                </button>\r\n                            </AddBlockContextMenu>\r\n                        </>\r\n                    }\r\n                </ResizableWrapper>\r\n            </div>\r\n        </BlockToolbarProvider>\r\n    )\r\n}\r\n\r\nexport default Block;","import React, { KeyboardEvent, useRef, useState } from \"react\";\r\n\r\ntype SpacingToolState = {\r\n    [key: string]: any;\r\n    left?: string;\r\n    right?: string;\r\n    bottom?: string;\r\n    top?: string;\r\n}\r\n\r\ntype SpacingToolProps = {\r\n    value?: SpacingToolState,\r\n    onChange?: (value: SpacingToolState) => void,\r\n}\r\n\r\nconst SpacingTool: React.FC<SpacingToolProps> = ({ value, onChange }) => {\r\n\r\n    const [spacings, setSpacings] = useState<SpacingToolState>(value ?? {});\r\n    const directions = [\r\n        'left',\r\n        'right',\r\n        'bottom',\r\n        'top'\r\n    ]\r\n\r\n    const spacingToolRef = useRef<HTMLDivElement>(null);\r\n\r\n    const handleChange = (direction: typeof directions[number], value: string) => {\r\n        const newSpacings = {\r\n            ...spacings, [direction]: value\r\n        }\r\n        setSpacings(newSpacings);\r\n    }\r\n\r\n    const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            spacingToolRef.current?.querySelectorAll('input').forEach((el) => {\r\n                el.blur();\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <p><b>Marges</b></p>\r\n            <div className=\"sg-block__SpacingTool\" ref={spacingToolRef}>\r\n\r\n                {directions.map((direction) => {\r\n                    return (\r\n                        <div\r\n                            key={direction}\r\n                            className={`sg-block__SpacingTool__${direction}`}\r\n                        >\r\n                            <input\r\n                                type=\"text\"\r\n                                onChange={(e) => handleChange(direction, e.target.value)}\r\n                                onBlur={() => onChange?.(spacings)}\r\n                                onKeyDown={(e) => handleKeyDown(e)}\r\n                                value={spacings[direction] ?? '0px'}\r\n                            />\r\n                        </div>\r\n                    )\r\n                })\r\n                }\r\n                <div className=\"sg-block__SpacingTool__center\" />\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default SpacingTool;","import ImageBlock from \"./blocks/ImageBlock\";\r\nimport { FaRegImage } from \"react-icons/fa6\";\r\nimport { FaAlignJustify } from \"react-icons/fa6\";\r\nimport { RxGroup } from \"react-icons/rx\";\r\nimport TextBlock from \"./blocks/TextBlock\";\r\nimport RowBlock from \"./blocks/GroupBlock\";\r\nimport { EditorBlock } from \"./definitions\";\r\nimport HtmlBlock from \"./blocks/HtmlBlock\";\r\n\r\nexport default {\r\n    text: {\r\n        name: 'Text',\r\n        type: 'text',\r\n        icon: FaAlignJustify,\r\n        render: (value) => { return (value as { htmlContent: string }).htmlContent },\r\n        editor: TextBlock,\r\n        defaultValue: {\r\n            htmlContent: '<p>Nouveau Bloc de Texte</p>'\r\n        },\r\n        isResizable: {\r\n            right: true,\r\n            left: true,\r\n            top: false,\r\n            bottom: false,\r\n            bottomLeft: false,\r\n            bottomRight: false,\r\n            topLeft: false,\r\n            topRight: false\r\n        },\r\n        hasSpacingOptions: true\r\n    },\r\n    image: {\r\n        name: 'Image',\r\n        type: 'image',\r\n        icon: FaRegImage,\r\n        render: undefined,\r\n        editor: ImageBlock,\r\n        isResizable: true,\r\n        hasSpacingOptions: true\r\n    },\r\n    group: {\r\n        name: 'Group',\r\n        type: 'group',\r\n        icon: RxGroup,\r\n        render: undefined,\r\n        editor: RowBlock,\r\n        acceptChildren: true,\r\n        isResizable: false,\r\n        defaultValue: {\r\n            flow: 'horizontal'\r\n        },\r\n        hasSpacingOptions: true\r\n    },\r\n    html: {\r\n        name: 'HTML',\r\n        type: 'html',\r\n        icon: FaAlignJustify,\r\n        render: async value => value?.htmlContent ?? '',\r\n        editor: HtmlBlock,\r\n        acceptChildren: false,\r\n        isResizable: false,\r\n        defaultValue: {\r\n            htmlContent: '<div></div>'\r\n        },\r\n        hasSpacingOptions: false\r\n    }\r\n} as { [key: string]: EditorBlock }","import React, { useMemo } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { useCallback, useEffect, useRef } from \"react\";\r\nimport { BlockType, EditorParsedBlock } from \"../definitions\";\r\nimport { useEditor } from \"../context\";\r\nimport { Editor } from 'react-draft-wysiwyg';\r\nimport draftToHtml from 'draftjs-to-html';\r\nimport htmlToDraft from 'html-to-draftjs';\r\nimport '../../node_modules/react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\r\nimport { ContentState, convertToRaw, EditorState } from \"draft-js\";\r\n\r\ntype TextBlockType = BlockType<{\r\n    htmlContent: string;\r\n}>\r\n\r\nconst TextBlock: React.FC<{ block: EditorParsedBlock<TextBlockType>, isActive?: boolean, toolbarOptions?: object }> = ({ block, isActive, toolbarOptions = textBlockToolbarOptions }) => {\r\n\r\n    const { updateBlock } = useEditor();\r\n\r\n    const { blockID, value } = block;\r\n\r\n    const editorRef = useRef<Editor|null>(null);\r\n    const initialEditorState = useMemo(() => {\r\n        const html = '<p>Nouveau bloc de <strong>Texte</strong> 😀</p>';\r\n        const contentBlock = htmlToDraft(value?.htmlContent ?? html);\r\n        return convertToRaw(ContentState.createFromBlockArray(contentBlock.contentBlocks))\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if(editorRef.current && isActive) {\r\n            editorRef.current.focusEditor();        \r\n        }\r\n    }, [isActive]);\r\n\r\n    const handleChange = useCallback((state: EditorState) => {\r\n        updateBlock(blockID, {\r\n            value: {\r\n                htmlContent: draftToHtml(convertToRaw(state.getCurrentContent()))\r\n            }\r\n        })\r\n    }, [blockID, updateBlock]);\r\n\r\n    return (\r\n        <>\r\n            <div className={clsx(\r\n                \"sg-block__blockText\",\r\n                isActive && \"sg-block__blockText--active\"\r\n            )}>\r\n                \r\n                <Editor\r\n                    ref={editorRef}\r\n                    onEditorStateChange={handleChange}\r\n                    initialContentState={initialEditorState}\r\n                    toolbarOnFocus\r\n                    wrapperClassName=\"sg-text__editor-container\"\r\n                    toolbarClassName=\"sg-text__toolbar\"\r\n                    toolbar={toolbarOptions}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport const textBlockToolbarOptions = {\r\n    options: [\r\n        \"inline\",\r\n        \"blockType\",\r\n        \"fontSize\",\r\n        \"list\",\r\n        \"textAlign\",\r\n        \"colorPicker\",\r\n        \"link\",\r\n        \"emoji\",\r\n        \"history\"\r\n      ],\r\n    inline: {\r\n        inDropdown: false,\r\n        options: ['bold', 'italic', 'underline']\r\n    },\r\n    list: { \r\n        inDropdown: false,\r\n        options: [\"unordered\", \"ordered\"],\r\n        title: 'Liste'\r\n    },\r\n    textAlign: { \r\n        inDropdown: true,\r\n        options: [\"left\", \"center\", \"right\"],\r\n        title: 'Alignement'\r\n    },\r\n    link: { inDropdown: false },\r\n    history: { inDropdown: false },\r\n    embedded: {},\r\n    fontFamily: {},\r\n    fontSize: {\r\n        options: [\r\n            \"14px\",\r\n            \"16px\",\r\n            \"18px\",\r\n            \"20px\"\r\n        ],\r\n        title: \"Taille de police\"\r\n    },\r\n    blockType: {\r\n        options: [\r\n            \"Normal\",\r\n            \"H1\",\r\n            \"H2\",\r\n            \"H3\",\r\n            \"H4\",\r\n            \"Blockquote\"\r\n          ],\r\n          title: \"Format\"\r\n    }\r\n}\r\n\r\nexport default TextBlock;","import React, { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport Block, { AddBlockContextMenu, BlockToolbar, BlockToolbarColumn } from \"../Block\";\r\nimport { BsArrowsExpand, BsArrowsExpandVertical } from \"react-icons/bs\";\r\nimport { BlockType, EditorParsedBlock } from \"../definitions\";\r\nimport { useEditor } from \"../context\";\r\nimport Button from \"../components/Button\";\r\nimport { MdCenterFocusStrong } from \"react-icons/md\";\r\nimport { FaPlus } from \"react-icons/fa6\";\r\n\r\ntype GroupBlockType = BlockType<{\r\n    flow: 'horizontal' | 'vertical',\r\n    template?: number[],\r\n}>\r\nexport interface RowBlockProps {\r\n    block: EditorParsedBlock<GroupBlockType>,\r\n    isActive?: boolean\r\n}\r\n\r\nconst RowBlock: React.FC<RowBlockProps> = ({ block, isActive }) => {\r\n    const minChildWidth = 320;\r\n    const { blockID, hasFocusWithin, value, children } = block;\r\n    const { flow, height, template } = value ?? {};\r\n\r\n    const [groupWidth, setGroupWidth] = useState<number | null>(null);\r\n    const [currentTemplate, setCurrentTemplate] = useState<number[]>(template || []);\r\n    const [isResizing, setIsResizing] = useState<number | null>(null);\r\n\r\n    const groupRef = useRef<HTMLDivElement|null>(null);\r\n    const { blocks, setActiveBlock, updateBlock } = useEditor();\r\n\r\n    const prevXRef = useRef<number | null>(null);\r\n\r\n    const isResizable = !!children?.length && groupWidth ? groupWidth > (minChildWidth * children?.length) : false;\r\n\r\n    //Resize Handlers\r\n\r\n    const handleResizeStart = useCallback((e: React.MouseEvent<HTMLDivElement>, indexEl: number) => {\r\n        if (isResizable) {\r\n            setIsResizing(indexEl);\r\n            prevXRef.current = e.clientX;\r\n            document.body.style.userSelect = 'none';\r\n        }\r\n    }, [prevXRef, setIsResizing, groupWidth, minChildWidth, isResizable]);\r\n\r\n    useEffect(() => {\r\n        if (children && children?.length !== currentTemplate.length) {\r\n            const newTemplate = Array(children.length).fill(100 / children?.length);\r\n            updateBlock(blockID, {\r\n                value: {\r\n                    template: newTemplate\r\n                }\r\n            })\r\n        }\r\n    }, [children?.length]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (isResizing !== null) {\r\n            const currentTemplateRef: { current: number[] | null } = { current: null }\r\n\r\n            const handleResize = (e: MouseEvent) => {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n\r\n                const deltaX = prevXRef.current ? e.clientX - prevXRef.current : 0;\r\n                const deltaPercentage = groupWidth ? deltaX / groupWidth * 100 : 0;\r\n                if (groupWidth)\r\n                    setCurrentTemplate((prevTemplate) => {\r\n                        const newTemplate = [...prevTemplate];\r\n                        newTemplate[isResizing] += deltaPercentage;\r\n                        newTemplate[isResizing + 1] -= deltaPercentage;\r\n                        if (\r\n                            newTemplate[isResizing] / 100 * groupWidth < minChildWidth ||\r\n                            newTemplate[isResizing + 1] / 100 * groupWidth < minChildWidth\r\n                        ) {\r\n                            currentTemplateRef.current = prevTemplate;\r\n                            return prevTemplate;\r\n                        }\r\n                        currentTemplateRef.current = newTemplate;\r\n                        return newTemplate;\r\n                    });\r\n                prevXRef.current = e.clientX;\r\n            };\r\n\r\n            const handleResizeEnd = () => {\r\n\r\n                setIsResizing(null);\r\n                prevXRef.current = null;\r\n                document.body.style.userSelect = '';\r\n                if (currentTemplateRef.current) {\r\n                    updateBlock(blockID, {\r\n                        value: {\r\n                            template: currentTemplateRef.current.map((val => Math.floor(val)))\r\n                        }\r\n                    });\r\n                }\r\n\r\n            };\r\n\r\n\r\n            document.addEventListener('mousemove', handleResize);\r\n            document.addEventListener('mouseup', handleResizeEnd);\r\n            return () => {\r\n                document.removeEventListener('mousemove', handleResize);\r\n                document.removeEventListener('mouseup', handleResizeEnd);\r\n            }\r\n        }\r\n    }, [isResizing, groupWidth]);\r\n\r\n    useEffect(() => {\r\n        setCurrentTemplate(template || []);\r\n    }, [template])\r\n\r\n    //Observe Resize event on group div\r\n    useEffect(() => {\r\n        const handleResize = (entries: ResizeObserverEntry[]) => {\r\n            for (const entry of entries) {\r\n                const { width } = entry.contentRect;\r\n                setGroupWidth(width);\r\n            }\r\n        };\r\n\r\n        const resizeObserver = new ResizeObserver(handleResize);\r\n\r\n        if (groupRef.current) {\r\n            resizeObserver.observe(groupRef.current);\r\n        }\r\n        \r\n        setGroupWidth(groupRef.current?.getBoundingClientRect().width || null);\r\n\r\n        return () => {\r\n            if (groupRef.current) {\r\n                resizeObserver.unobserve(groupRef.current);\r\n            }\r\n            resizeObserver.disconnect();\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (children)\r\n            updateBlock(blockID, {\r\n                value: {\r\n                    template: children.map(() => 100 / children.length)\r\n                }\r\n\r\n            })\r\n    }, [children])\r\n\r\n    return (\r\n        <>\r\n            <BlockToolbar>\r\n                <BlockToolbarColumn\r\n                    title={'Direction'}\r\n                >\r\n                    <Button\r\n                        variant={flow === \"vertical\" ? undefined : \"selected\"}\r\n                        onClick={() => updateBlock(blockID, {\r\n                            value: {\r\n                                flow: \"horizontal\"\r\n                            }\r\n                        })}\r\n                        title=\"Empiler les blocs horizontalement\"\r\n                        ariaLabel=\"Empiler les blocs horizontalement\"\r\n                    >\r\n                        <BsArrowsExpandVertical />\r\n                    </Button>\r\n                    <Button\r\n                        variant={flow !== \"vertical\" ? undefined : \"selected\"}\r\n                        onClick={() => updateBlock(blockID, {\r\n                            value: {\r\n                                flow: \"vertical\"\r\n                            }\r\n                        })}\r\n                        title=\"Empiler les blocs verticalement\"\r\n                        ariaLabel=\"Empiler les blocs verticalement\"\r\n                    >\r\n                        <BsArrowsExpand />\r\n                    </Button>\r\n                </BlockToolbarColumn>\r\n            </BlockToolbar>\r\n            <div\r\n                className={clsx(\r\n                    \"sg-block__blockGroup\",\r\n                    block.hasFocusWithin && 'sg-block__blockGroup--focusWithin',\r\n                    flow === \"vertical\" ? 'sg-block__blockGroup--vertical' : 'sg-block__blockGroup--horizontal',\r\n                    height && (typeof height === 'number' || height.indexOf('px') !== -1) ? 'sg-block__blockGroup--fixedHeight' : ''\r\n                )}\r\n                ref={groupRef}\r\n            >\r\n                {!!children &&\r\n                    block.children?.map((childID, indexEl) => (\r\n                        <div\r\n                            key={childID}\r\n                            className=\"sg-block__blockGroup__childContainer\"\r\n                            style={{\r\n                                flex: currentTemplate?.[indexEl] + \"% 1 0\",\r\n                                minWidth: minChildWidth + \"px\"\r\n                            }}\r\n                        >\r\n                            <Block\r\n                                horizontalFlow={flow !== 'vertical'}\r\n                                block={blocks.get(childID)}\r\n                            />\r\n                            {isActive && (indexEl !== children.length - 1) &&\r\n                                <div\r\n                                    className={clsx(\r\n                                        \"sg-block__blockGroup__resizeHandle\",\r\n                                        (!isResizable || flow === 'vertical') && \"sg-block__blockGroup__resizeHandle--disabled\",\r\n                                    )}\r\n                                    onMouseDown={(e) => handleResizeStart(e, indexEl)}\r\n                                />}\r\n                        </div>\r\n                    ))\r\n                }\r\n                {!children?.length &&\r\n                    <div className=\"sg-block__blockGroup__placeholder\" />\r\n                }\r\n                {!!isActive &&\r\n                    <AddBlockContextMenu\r\n                        args={{ parentID: blockID }}\r\n                        className=\"sg-block__blockGroup__addChild\"\r\n                    >\r\n                        <button\r\n                            title=\"Ajouter des blocs à l'intérieur du groupe\"\r\n                            aria-label=\"Ajouter des blocs à l'intérieur du groupe\"\r\n                            className=\"sg-block__btn sg-block__btn--square\"><FaPlus /></button>\r\n                    </AddBlockContextMenu>\r\n                }\r\n\r\n                {(hasFocusWithin && !isActive) &&\r\n                    <Button\r\n                        className=\"sg-block__btn sg-block__btn--square sg-block__blockGroup__focusParent\"\r\n                        onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            setActiveBlock(blockID)\r\n                        }}\r\n                        title=\"Sélectionner le groupe parent\"\r\n                        ariaLabel=\"Sélectionner le groupe parent\"\r\n                    >\r\n                        <MdCenterFocusStrong />\r\n                    </Button>\r\n                }\r\n            </div >\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default RowBlock;","import React from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { useCallback} from \"react\";\r\nimport { BlockType, EditorParsedBlock } from \"../definitions\";\r\nimport { useEditor } from \"../context\";\r\n\r\ntype HtmlBlockType = BlockType<{\r\n    htmlContent: string;\r\n}>\r\n\r\nconst HtmlBlock: React.FC<{ block: EditorParsedBlock<HtmlBlockType>, isActive?: boolean }> = ({ block, isActive }) => {\r\n\r\n    const { updateBlock } = useEditor();\r\n\r\n    const { blockID, value } = block;\r\n\r\n    const handleChange = useCallback((value: string) => {\r\n        updateBlock(blockID, {\r\n            value: {\r\n                htmlContent: value\r\n            }\r\n        })\r\n    }, [blockID, updateBlock]);\r\n\r\n    return (\r\n        <div className={clsx(\r\n            \"sg-block__blockHtml\",\r\n            isActive && \"sg-block__blockHtml--active\"\r\n        )}>\r\n            \r\n            <textarea\r\n                onChange={(e) => handleChange(e.target.value)}\r\n                value={value?.htmlContent}\r\n                className=\"sg-block__blockHtmlTextarea\"\r\n                rows={10}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HtmlBlock;","import { Enable } from \"re-resizable\"\r\nimport { ComponentType, ReactElement } from \"react\"\r\nimport { IconType } from \"react-icons\"\r\n\r\nexport interface BlocksEditorProps {\r\n    data?: BlockType[] | null,\r\n    onChange?: (data: BlockType[]) => void,\r\n    extraBlocks?: Record<string, EditorBlock>\r\n}\r\n\r\ntype EditorBlockComponentProps = {\r\n    block: EditorParsedBlock,\r\n    isActive?: boolean\r\n}\r\n\r\nexport type EditorBlock = {\r\n    name: string,\r\n    type: string,\r\n    icon?: IconType|ComponentType,\r\n    render?: (value: BlockType<BlockValueGeneric>['value']) => Promise<string>|string,\r\n    editor?: ComponentType<EditorBlockComponentProps>,\r\n    defaultValue?: BlockType<BlockValueGeneric>['value'],\r\n    acceptChildren?: boolean,\r\n    isResizable?: boolean | Enable,\r\n    hasSpacingOptions?: boolean\r\n}\r\n\r\nexport interface EditorProviderProps {\r\n    children: React.ReactNode,\r\n    data?: BlockType[] | null,\r\n    onChange?: (data: BlockType[]) => void,\r\n    availableBlocks: { [key: string|symbol]: EditorBlock }\r\n}\r\n\r\nexport type EditorParsedBlock<T extends BlockType = BlockType<BlockValueGeneric>> = Omit<T, 'children'> & {\r\n    blockID: string,\r\n    parentID?: string,\r\n    children?: string[],\r\n    hasFocusWithin?: boolean,\r\n    isActive?: boolean,\r\n}\r\n \r\ntype BlockValueGeneric = Record<symbol|string, string|number|object|undefined>;\r\n\r\nexport type BlockType<V = BlockValueGeneric> = {\r\n    type: string;\r\n    value?: V & { \r\n        width?: number|string,\r\n        height?: number|string,\r\n        spacings?: {\r\n            top?: string,\r\n            right?: string,\r\n            bottom?: string,\r\n            left?: string\r\n        }\r\n    };\r\n    children?: BlockType<BlockValueGeneric>[];\r\n};\r\n\r\nexport type EditorRefObject = {\r\n    JSONValue: BlockType<BlockValueGeneric>[],\r\n    HTMLValue: string,\r\n    getJSONValue(): BlockType[];\r\n    getHTMLValue(): string;\r\n}\r\n\r\nexport type addBlockMenuProps = { \r\n    className?: string, \r\n    args?: { parentID?: string, position?: 'after' | 'before', reference?: string }, \r\n    children: ReactElement \r\n}"],"mappings":"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","names":["import_react","children","import_react","import_jsx_runtime","import_react","import_react","import_jsx_runtime","value","import_jsx_runtime","clsx","_a","_b","_c","import_fa6","import_jsx_runtime","e","_a","value","import_fa6","import_react","import_clsx","import_jsx_runtime","htmlToDraft","draftToHtml","clsx","import_react","import_clsx","import_md","import_fa6","import_jsx_runtime","_a","clsx","import_clsx","import_react","import_jsx_runtime","value","clsx","import_fa6","import_clsx","import_jsx_runtime","clsx"]}